import std::general;
import std::container;

module std::container {
	# A dynamically sized vector of elements.
	struct Collection<type T> extends Wrapper<T[]> {
		# How many extra items to allocate for better
		# efficiency when resizing the underlying array.
		Index grace;
		
		constructor(Index grace) :
			super({}),
			grace(grace) { }
		
		# Resize the underlying array to have enough space to append
		# new items.
		fn reserve(Index size) -> void {
			intrinsic::array::resize(
				this.value,
				
				intrinsic::array::size(this.value)
					+ size
					+ this.grace
			);
		}
	
		# Append an item to the end of the collection.
		fn append(T item) -> void {
			# TODO: Only resize if no reservation was previously made.
			intrinsic::arrayResize(this.value, this.size++);
			
			this.value[this.size] = item;
		}
	
		# Determine whether the collection contains a certain
		# item.
		@noDiscard
		fn contains(T item) -> bool {		
			for (Index i = 0; i < intrinsic::size(this.value); i++) {
				if (this.value[i] == item) {
					return true;
				}
			}
			
			return false;
		}
		
		@noDiscard
		fn getSize() -> Index {
			return intrinsic::array::size(this.value) - this.grace;
		}
		
		@noDiscard
		fn isEmpty() -> bool {
			return this.getSize() == (Index)0;
		}
		
		@noDiscard
		fn findIndexOf(T item) -> Index? {
			for (Index i = 0; i < intrinsic::array::size(this.value); i++) {
				if (this.value[i] == item) {
					return i;
				}
			}
			
			return null;
		}
	}
}