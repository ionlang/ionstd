import std;
import std::container;

module std::container {
	# TODO: Implement key hashing, etc.
	struct Map<type TKey, type TValue>
		extends SizedContainer {
		
		constructor() { }
		
		@NoDiscard
		fn contains(TKey key) -> bool {
			# TODO
			throw PendingException{};
		}
		
		@NoException
		fn set(TKey key, TValue value) -> void {
			# TODO
			throw PendingException{};
		}
		
		@NoDiscard
		@NoException
		fn find(TKey key) -> TValue? {
			if (!this.contains(key)) {
				return null;
			}
			
			# TODO
			throw PendingException{};
		}
		
		@NoDiscard
		@NoException
		fn findOr(TKey key, TValue alternativeValue) -> TValue {
			TValue? result = this.find(key);
			
			return result != null
				? result!
				: alternativeValue;
		}
		
		@NoException
		fn remove(TKey key) -> bool {
			if (!this.contains(key)) {
				return false;
			}
			
			# TODO
			throw PendingException{};
		}
	}
}